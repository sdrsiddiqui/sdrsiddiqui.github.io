var store = [{
        "title": "Atom",
        "excerpt":"Atom   Atom is a very powerful editor.   Go to the official webpage of Atom(https://atom.io) and download the Atom for 64 bit installer.   Install the Atom. Wait until Atom is installed.   Normally to open Atom, we browse to the program and click on the Atom icon which opens in a random directory.   Is it cool if we can open the Atom in any directory without changing the directory all the time.   For this we have to some changes.     Open Atom        Click on File &gt; Settings and Click “System” tab.  Check the second and third options.    Show in file context menus    Show in folder context menus       Close Atom   Right click and you will see “open with Atom”. Now you can open the Atom anywhere you want to open.   Make Atom ready for Python      File &gt; Settings &gt; Install then search “script” and install it.   it will let the python file to run from the Atom. Write a code in python and then use keyboard shortcuts Ctrl + shift + b for windows and unix.      There are other ways also. Where we can integrate command line in ATOM so that we don’t need other windows for command line.   File&gt; Settings&gt;Install   “platform-ide-terminal” On the left side there will be a “plus” sign. click on it and a new command line window will appear.   If you press Ctrl+T or Ctrl+P, the Fuzzy Finder will pop up. This will let you quickly search for any file in your project by typing parts of the path.      File&gt;Settings&gt;Install another package   a. “autocomplete-python”.   This will make your life more easy as python developer.   b. “python-autopep8”   this format the python code according to the PEP8 guidelines. more information could be find here https://pypi.org/project/autopep8/     1. to use this we need to install autopep8 by using pip install autopep8 in the bash   2. Click on the Settings of python-autopep8 and go to the Settings. check the format on Save   c. “linter-flake8”   Flake8 is a Python library that wraps PyFlakes, pycodestyle and Ned Batchelder’s McCabe script. It is a great toolkit for checking your code base against coding style (PEP8), programming errors (like “library imported but unused” and “Undefined name”) and to check cyclomatic complexity. https://simpleisbetterthancomplex.com/packages/2016/08/05/flake8.html  1. To use this plugin flake8 will need to be installed on your system.   pip install flake8 from the bash   d. “Browser Plus”      Install this. It opens a real browser in ATOM. Which is very handy for debugging and checking the output at the same time.      ctrl+shift+p(cmd+shift+p) Browser Plus: Open. It opens the home page(maintained in the settings) or http://www.google.com.      ctrl + shift + P to open the browser window.   e . “file-icons”   This put a little icon next to each file, which helps us to identify which kind of file it is. File-specific icons in Atom for improved visual grepping.  ","categories": ["wilt"],
        "tags": ["Atom","editor"],
        "url": "http://localhost:4000/wilt/Atom-eidtor/",
        "teaser":null},{
        "title": "5 steps for making a blog with Jekyll",
        "excerpt":"Whenever we hear about blogs we think more often about WordPress or BlogSpot blogs. WordPress is more popular once right now. It is an open source online website creation tool, which was written in PHP and MySQL.   Lots of people complain about their WordPress blog getting infected with malware or hacked, or being slow etc. Let us learn about Jekyll and how it overcomes the problems mentioned above.   Introducing Jekyll   Jekyll transforms plain text into static websites. It is a simple static site generator, and takes a source file (written in markup language) for creating a static website. It supports all kinds of file formats and is good for quickly creating a blog.      In 2009, Jekyll was written in Ruby, by Tom Preston-Werner, GitHub’s co-founder.    Though it needs some technical background and a good knowledge of Markdown and the Liquid templating language, which are easy to learn if you have some basic knowledge of HTML. Ever since it is getting popular and glimpse of Jekyll popularity can be seen on Showcase and wiki.   For this blog, I preferred Jekyll because of the following reasons.           Performance: Extremely fast as web server only returns static files.            Secure: There are only static files which means content is not produced dynamically, so there is no chance for it to get exploited or hacked. Until someone hacked the server.            Less costly: It requires less resources which reduces its operative cost.            Easy to learn: If you know HTML, CSS and JavaScript then only learning a new templating language called Liquid will suffice.            Low maintenance: With first-class support for Markdown, and the Liquid templating language, making a blog is as easy as running two commands. It takes less then five minutes for setting up Jekyll and the maintaining cost is minimum.            Big community: Jekyll has big active community and a team of Core maintainers which is working hard to maintain it. They have documented Jekyll very well.            New Learning Experience: Blogging is a the best way to learn and share about new technologies. We learn more by teaching others and while getting your hands dirty with real world problems.       TL;DR Procedure for creating a blog on Jekyll like this one:      Install Jekyll.   Download the theme.   Built the site.   Modify the files Gemfile and  _config.yml file.   Built the site and run the server.     The above steps are explained below in details.   Installing Jekyll   Install Jekyll on windows. Installation procedures are very well documented on Jekyll website.         Jekyll for windows   According to the Jekyll official documentation: The easiest way to run Jekyll is by using the RubyInstaller for Windows.        Ruby for windows   Jekyll is a  Ruby Gem. On stackoverflow Gem is explained.     Gem is a package manager for the Ruby programming language that provides a standard format for distributing Ruby programs and libraries, a tool designed to easily manage the installation of gems, and a server for distributing them.    Download the theme   I preffered the minimal mistake theme created by Michael Rose. I find it simple and elegant theme which is very well documented.   We can download the theme directly from the link above and save it. I would recommend using Git. Open Git bash and type the following command:    $ git clone https://github.com/mmistakes/minimal-mistakes        Downloading minimal mistake theme with Git bash   Change into your new directory. Now, we need to install Bundler in our project folder by the following code.   $ cd minimal-mistakes/ $ bundle install         Installing Bundle with Git bash      Bundler provides a consistent environment for Ruby projects by tracking and installing the exact gems and versions that are needed.    Built the site   Build the site and make it available on a local server by the following command:   $ bundle exec jekyll serve         Built the Jekyll site    Now browse to http://localhost:4000 to see your site.         Built the Jekyll site    Modify the files Gemfile and  _config.yml file   Modify your Gemfile with the following code  source 'https://rubygems.org' gem \"minimal-mistakes-jekyll\" gem 'jekyll-include-cache' gem 'jekyll-archives'    Modify _config.yml file   Now we need to modify config.yml file. We need to modify some places.   We start with modifying plugins. Add the following line  - jekyll-archives  at line 225. So that the final plugins will look like this   plugins:   - jekyll-paginate   - jekyll-sitemap   - jekyll-gist   - jekyll-feed   - jemoji   - jekyll-include-cache   - jekyll-archives    Now we will uncomment the jekyll-archives which can be found at line 254. We will uncomment it till line 263. It will look like following:   jekyll-archives:   enabled:      - categories      - tags   layouts:      category: archive-taxonomy      tag: archive-taxonomy   permalinks:      category: /categories/:name/      tag: /tags/:name/    We will add the following lines at the defaults (line 287)  jekyll-archives:   enabled:      - categories      - tags   layouts:      category: archive-taxonomy      tag: archive-taxonomy   permalinks:      category: /categories/:name/      tag: /tags/:name/    In Site Settings we will activate breadcrumbs on line 27 by making it true. It will look like as follows:  breadcrumbs              : true # true, false (default)   We can change the title, name and description as we want.   In the Site Author section we modify the author name, bio, location, links to email, twitter, facebook etc according to our requirements.   Built the site   Build the site and make it available on a local server   $ bundle exec jekyll serve         Built the Jekyll site    Now browse to http://localhost:4000 to see your site.   ###Conclusion###   We have learned about Jekyll, its advantages and also about how to make a blog in just five steps. Jekyll is a very powerful tool which is becoming very powerful for blogging which opens new ways to make a website faster and more secure.    REFERENCES     Jekyll   Wiki   Showcase   RubyInstaller   Ruby Gem  ","categories": ["wilt"],
        "tags": ["Jekyll","Liquid"],
        "url": "http://localhost:4000/wilt/How-to-make-a-blog-like-this/",
        "teaser":null}]
